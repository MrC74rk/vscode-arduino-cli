  let disposable = vscode.commands.registerCommand("extension.compile", async (cmdArgs: any) => {
    commandArgs = cmdArgs;
    let editor = vscode.window.activeTextEditor;
    selection = editor && editor.selection ? editor.selection : undefined;
    await startWebserver();
    let printConfig = vscode.workspace.getConfiguration("print", null);
    let cmd = printConfig.alternateBrowser && printConfig.browserPath ? `"${printConfig.browserPath}"` : browserLaunchMap[process.platform];
    child_process.exec(`${cmd} http://localhost:${port}/`);
  });
  context.subscriptions.push(disposable);
  disposable = vscode.commands.registerCommand('extension.browse', async (cmdArgs: any) => {
    commandArgs = cmdArgs;
    let x = vscode.extensions.getExtension("pdconsec.vscode-print");
    if (!x) { throw new Error("Cannot resolve extension. Has the name changed? It is defined by the publisher and the extension name defined in package.json"); }
    var styleCachePath = `${x.extensionPath.replace(/\\/g, "/")}/node_modules/highlight.js/styles`;
    let printConfig = vscode.workspace.getConfiguration("print", null);
    let currentPath = `${styleCachePath}/${printConfig.colourScheme}.css`;
    vscode.window.showOpenDialog({
      canSelectFiles: true,
      canSelectMany: false,
      defaultUri: vscode.Uri.file(fs.existsSync(currentPath) ? currentPath : styleCachePath),
      filters: {
        Stylesheet: ['css']
      }
    }).then(f => {
      if (f) {
        let p = f[0].fsPath.replace(/\\/g, "/");
        let lastSlashPosition = p.lastIndexOf("/");
        let extensionSeparatorPosition = p.lastIndexOf(".");
        if (extensionSeparatorPosition === -1) {
          extensionSeparatorPosition = p.length;
        }
        var path = p.substring(0, lastSlashPosition);
        var fileName = p.substring(lastSlashPosition + 1, extensionSeparatorPosition);
        try {
          vscode.workspace.getConfiguration().update("print.colourScheme", fileName, vscode.ConfigurationTarget.Global).then(() => {
            if (path !== styleCachePath) {
              let newCachePath = `${styleCachePath}/${fileName}`;
              fs.copyFile(p, newCachePath, err => {
                if (err) {
                  vscode.window.showErrorMessage(err.message);
                }
              });
            }
          }, (err) => {
            debugger;
          });
        } catch (err) {
          debugger;
        }
      }
    });
  });
  context.subscriptions.push(disposable);
